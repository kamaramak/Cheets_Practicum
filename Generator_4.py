import requests
from bs4 import BeautifulSoup

INPUT_FILE = "links_4.txt"
OUTPUT_FILE = "4. API - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–≥—Ä–∞–º–º.html"
NAME = 'API - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–≥—Ä–∞–º–º'


def fetch_pdf_title(url):
    """–ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ PDF —Ñ–∞–π–ª–∞ –∏–∑ URL –∏–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ HTTP
        headers = {"User-Agent": "Mozilla/5.0"}
        response = requests.head(url, headers=headers,
                                 timeout=10, allow_redirects=True)

        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Content-Disposition
        content_disposition = response.headers.get('Content-Disposition', '')
        if 'filename=' in content_disposition:
            filename = re.findall(
                r'filename=["\']?(.*?)["\']?$', content_disposition)
            if filename:
                # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .pdf –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º URL-encoded —Å–∏–º–≤–æ–ª—ã
                title = filename[0].replace('.pdf', '').replace('%20', ' ')
                return title

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö, –±–µ—Ä–µ–º –∏–∑ URL
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL –∏ —É–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        title = url.split('/')[-1].replace('.pdf', '')
        title = requests.utils.unquote(title)  # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL-encoded —Å–∏–º–≤–æ–ª—ã
        title = title.replace('%20', ' ')  # –ó–∞–º–µ–Ω—è–µ–º %20 –Ω–∞ –ø—Ä–æ–±–µ–ª—ã

        return title

    except Exception as e:
        print(f"[!] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å PDF {url}: {e}")
        return url.split('/')[-1].replace('.pdf', '')


def fetch_html_title_and_text(url):
    """–ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–∫—Å—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    try:
        headers = {"User-Agent": "Mozilla/5.0"}
        r = requests.get(url, headers=headers, timeout=10)
        r.encoding = r.apparent_encoding
        soup = BeautifulSoup(r.text, "html.parser")

        title = soup.title.string.strip() if soup.title else url

        # –£–±–∏—Ä–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã, —Å—Ç–∏–ª–∏ –∏ –Ω–µ—á–∏—Ç–∞–±–µ–ª—å–Ω–æ–µ
        for tag in soup(["script", "style", "noscript"]):
            tag.decompose()

        visible_text = soup.get_text(separator=' ', strip=True)
        # –û–≥—Ä–∞–Ω–∏—á–∏–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        visible_text = " ".join(visible_text.split()[:1000])
        return title, visible_text
    except Exception as e:
        print(f"[!] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å {url}: {e}")
        return url, ""


def fetch_title_and_text(url):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ PDF
    if url.lower().endswith('.pdf') or 'pdf' in requests.head(url).headers.get('Content-Type', ''):
        print(f"üìÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω PDF: {url}")
        title = fetch_pdf_title(url)
        return title, f"PDF –¥–æ–∫—É–º–µ–Ω—Ç: {title}"
    else:
        # –û–±—ã—á–Ω–∞—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        return fetch_html_title_and_text(url)


def generate_html(links_data):
    html = """
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <title>–ú–æ–∏ —à–ø–∞—Ä–≥–∞–ª–∫–∏</title>
  <style>
    body { font-family: sans-serif; background: #f9f9f9; padding: 40px; max-width: 800px; margin: auto; }
    h1 { text-align: center; }
    #searchBox { width: 100%; padding: 10px; font-size: 16px; margin-bottom: 20px; border: 1px solid #ccc; border-radius: 5px; }
    ul { list-style: none; padding: 0; }
    li { margin: 15px 0; }
    a { text-decoration: none; color: #3366cc; font-weight: bold; }
    a:hover { text-decoration: underline; }
    .pdf-link { color: #d93025; }
    .pdf-link:before { content: "üìÑ "; }
  </style>
  <script>
    function filterLinks() {
      var input = document.getElementById("searchBox");
      var filter = input.value.toLowerCase();
      var ul = document.getElementById("linkList");
      var li = ul.getElementsByTagName("li");

      for (var i = 0; i < li.length; i++) {
        var a = li[i].getElementsByTagName("a")[0];
        var data = li[i].getAttribute("data-text").toLowerCase();
        var title = a.textContent.toLowerCase();

        if (title.includes(filter) || data.includes(filter)) {
          li[i].style.display = "";
        } else {
          li[i].style.display = "none";
        }
      }
    }
  </script>
</head>
<body>
  <h1>üß† –ú–æ–∏ —à–ø–∞—Ä–≥–∞–ª–∫–∏</h1>
  <h1>""" + NAME + """</h1>
  <input type="text" id="searchBox" onkeyup="filterLinks()" placeholder="üîç –ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã...">
  <ul id="linkList">
"""
    for idx, (url, title, text, is_pdf) in enumerate(links_data, start=1):
        clean_text = text.replace('"', "&quot;")
        link_class = 'pdf-link' if is_pdf else ''
        html += f'    <li data-text="{clean_text}"><strong>{idx}.</strong> <a href="{url}" target="_blank" class="{link_class}">{title}</a></li>\n'

    html += """  </ul>
</body>
</html>
"""
    return html


def main():
    links = []
    with open(INPUT_FILE, "r", encoding="utf-8") as f:
        for line in f:
            url = line.strip()
            if url:
                links.append(url)

    links_data = []
    for i, link in enumerate(links, 1):
        print(f"[{i}/{len(links)}] –û–±—Ä–∞–±–æ—Ç–∫–∞: {link}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Å—ã–ª–∫–∏
        is_pdf = link.lower().endswith('.pdf')

        if is_pdf:
            title = fetch_pdf_title(link)
            text = f"PDF –¥–æ–∫—É–º–µ–Ω—Ç: {title}"
        else:
            title, text = fetch_html_title_and_text(link)

        links_data.append((link, title, text, is_pdf))

    html = generate_html(links_data)

    with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
        f.write(html)

    print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –û—Ç–∫—Ä—ã–≤–∞–π —Ñ–∞–π–ª: {OUTPUT_FILE}")


if __name__ == "__main__":
    main()
